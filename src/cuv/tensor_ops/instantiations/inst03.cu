
/**************************************************
 This is an auto-generated file.
 See instantiate.py to modify the content in here!
 **************************************************/
 #include "../tensor_ops.cuh"
 namespace cuv{
 namespace detail{ template void apply_binary_functor<tensor<float,host_memory_space>::value_type,tensor<float,host_memory_space>::value_type,tensor<float,host_memory_space>::value_type,tensor<float,host_memory_space>::memory_space_type,float,float >(tensor<float,host_memory_space>&,const tensor<float,host_memory_space>&,const tensor<float,host_memory_space>&, const BinaryFunctor&,const int&, const float&, const float&);}
namespace detail{ template void apply_binary_functor<tensor<unsigned int,host_memory_space>::value_type,tensor<unsigned int,host_memory_space>::value_type,tensor<unsigned int,host_memory_space>::value_type,tensor<unsigned int,host_memory_space>::memory_space_type,unsigned int,unsigned int >(tensor<unsigned int,host_memory_space>&,const tensor<unsigned int,host_memory_space>&,const tensor<unsigned int,host_memory_space>&, const BinaryFunctor&,const int&, const unsigned int&, const unsigned int&);}
namespace detail{ template void apply_binary_functor<tensor<int,host_memory_space>::value_type,tensor<int,host_memory_space>::value_type,tensor<int,host_memory_space>::value_type,tensor<int,host_memory_space>::memory_space_type,int,int >(tensor<int,host_memory_space>&,const tensor<int,host_memory_space>&,const tensor<int,host_memory_space>&, const BinaryFunctor&,const int&, const int&, const int&);}
namespace detail{ template void apply_binary_functor<tensor<unsigned char,host_memory_space>::value_type,tensor<unsigned char,host_memory_space>::value_type,tensor<unsigned char,host_memory_space>::value_type,tensor<unsigned char,host_memory_space>::memory_space_type,unsigned char,unsigned char >(tensor<unsigned char,host_memory_space>&,const tensor<unsigned char,host_memory_space>&,const tensor<unsigned char,host_memory_space>&, const BinaryFunctor&,const int&, const unsigned char&, const unsigned char&);}
namespace detail{ template void apply_binary_functor<tensor<signed char,host_memory_space>::value_type,tensor<signed char,host_memory_space>::value_type,tensor<signed char,host_memory_space>::value_type,tensor<signed char,host_memory_space>::memory_space_type,signed char,signed char >(tensor<signed char,host_memory_space>&,const tensor<signed char,host_memory_space>&,const tensor<signed char,host_memory_space>&, const BinaryFunctor&,const int&, const signed char&, const signed char&);}
namespace detail{ template void apply_binary_functor<tensor<unsigned char,host_memory_space>::value_type,tensor<float,host_memory_space>::value_type,tensor<float,host_memory_space>::value_type,tensor<unsigned char,host_memory_space>::memory_space_type,float,float >(tensor<unsigned char,host_memory_space>&,const tensor<float,host_memory_space>&,const tensor<float,host_memory_space>&, const BinaryFunctor&,const int&, const float&, const float&);}
namespace detail{ template void apply_binary_functor<tensor<unsigned char,host_memory_space>::value_type,tensor<unsigned int,host_memory_space>::value_type,tensor<unsigned int,host_memory_space>::value_type,tensor<unsigned char,host_memory_space>::memory_space_type,unsigned int,unsigned int >(tensor<unsigned char,host_memory_space>&,const tensor<unsigned int,host_memory_space>&,const tensor<unsigned int,host_memory_space>&, const BinaryFunctor&,const int&, const unsigned int&, const unsigned int&);}
namespace detail{ template void apply_binary_functor<tensor<unsigned char,host_memory_space>::value_type,tensor<int,host_memory_space>::value_type,tensor<int,host_memory_space>::value_type,tensor<unsigned char,host_memory_space>::memory_space_type,int,int >(tensor<unsigned char,host_memory_space>&,const tensor<int,host_memory_space>&,const tensor<int,host_memory_space>&, const BinaryFunctor&,const int&, const int&, const int&);}
namespace detail{ template void apply_binary_functor<tensor<unsigned char,host_memory_space>::value_type,tensor<signed char,host_memory_space>::value_type,tensor<signed char,host_memory_space>::value_type,tensor<unsigned char,host_memory_space>::memory_space_type,signed char,signed char >(tensor<unsigned char,host_memory_space>&,const tensor<signed char,host_memory_space>&,const tensor<signed char,host_memory_space>&, const BinaryFunctor&,const int&, const signed char&, const signed char&);}
}
